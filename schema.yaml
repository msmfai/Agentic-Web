# Repository Schema Definition
# This file defines the SCAFFOLD frontmatter and tag requirements (project-agnostic)
# For PROJECT-SPECIFIC tag rules, see project_config/tag_rules.yaml
# Janitor reads both files to validate repository health

# Python Code Files (.py in code/)
python:
  # Python files use custom markdown format (not YAML frontmatter)
  # YAML frontmatter can't work because it must be first line, but Python requires """ first

  template: |
    """
    # Module Name

    **File Tags**: #type/code-file
    **Inheritable Tags**: #domain/* #layer/* #pattern/*

    ## Purpose
    Brief description of the module

    ## Related Documentation
    - Concept: [[../obsidian/concept-file|Display]]

    ## Dependencies
    - [[other-file.py|Display]]
    """

  required_tags:
    - "type/code-file"

  # Two separate tag lines in Python docstrings:
  # - "File Tags:" - Apply only to the .py file itself (not inherited)
  # - "Inheritable Tags:" - Inherited by all AST cache nodes for functions/classes

---
# Markdown Concept Files (.md in obsidian/)
markdown-concept:
  template: |
    ---
    tags:
      - type/concept
      - domain/*
      - layer/*
    ---

    # Concept Name

    Description of the concept...

  required_tags:
    - "type/concept"

---
# Markdown Pattern Files (.md in obsidian/)
markdown-pattern:
  template: |
    ---
    tags:
      - type/pattern
      - category/*
    ---

    # Pattern Name

    Description of the pattern...

  required_tags:
    - "type/pattern"

---
# Index Files (README.md, CLAUDE.md, etc.)
markdown-index:
  template: |
    ---
    tags:
      - type/index
    ---

    # Index Title

    Content...

  required_tags:
    - "type/index"

---
# AST Cache Files (.ast.md in ast-cache/)
ast-cache:
  template: |
    ---
    tags:
      - type/ast-node
      - ast-type/function
    source_file: ../../../code/file.py
    block_marker: ^function-name
    object_type: function
    ---

    # Object Name

    **Source**: [[../../../code/file.py#^marker|Source]]

  required_tags:
    - "type/ast-node"

---
# Auto-Generated Repository Index Files
markdown-auto-generated:
  template: |
    ---
    tags:
      - type/index
      - purpose/project-state  # or purpose/tag-inventory
      - auto-generated
    ---

    # File Title

    **Auto-generated - do not edit manually**
    **Last Updated**: YYYY-MM-DD HH:MM:SS

    Content...

  required_tags:
    - "type/index"
    - "auto-generated"

---
# Tag Hierarchy Guidelines (SCAFFOLD DEFAULTS)
# These are recommendations for subdividing tags as the codebase grows
# Add project-specific tags in project_config/tag_rules.yaml

tag-hierarchies:
  # Domain tags - what area of functionality
  domain:
    mathematics:
      - "domain/mathematics"              # Parent tag (always include)
      - "domain/mathematics/arithmetic"   # Basic operations: +, -, *, /, !
      - "domain/mathematics/trigonometry" # Trig functions: sin, cos, tan, asin, acos, atan
      - "domain/mathematics/exponential"  # Exp/log: exp, ln, log10, log, power, sqrt, cbrt

    testing:
      - "domain/testing"                  # Parent tag (always include)
      - "domain/testing/unit"             # Unit tests for individual functions/classes
      - "domain/testing/integration"      # Integration tests for component interaction

    ui:
      - "domain/ui"                       # User interface code

    automation:
      - "domain/automation"               # Infrastructure and build scripts

  # Layer tags - architectural layer
  layer:
    - "layer/core"                        # Core business logic / domain layer
    - "layer/domain"                      # Domain-specific implementations
    - "layer/interface"                   # User-facing interfaces
    - "layer/application"                 # Application orchestration
    - "layer/infrastructure"              # Build, deployment, tooling
    - "layer/test"                        # Test code

  # Pattern tags - design patterns in use
  pattern:
    strategy:
      - "pattern/strategy"                # Parent tag (always include)
      - "pattern/strategy/function-registry" # Dictionary-based function lookup
      - "pattern/strategy/delegation"     # Delegating to other components

  # Category tags - cross-cutting concerns
  category:
    - "category/unit-test"                # Unit testing
    - "category/code-generation"          # Code generation tools
    - "category/indexing"                 # Indexing and cataloging
    - "category/analytics"                # Metrics and analysis
    - "category/validation"               # Validation and health checks
    - "category/orchestration"            # Workflow orchestration
    - "category/best-practices"           # Best practice documentation
    - "category/behavioral"               # Behavioral design patterns
    - "category/solid-principles"         # SOLID principles

# Tagging Best Practices:
# 1. Always include parent tags when using hierarchical tags
#    Example: #domain/mathematics #domain/mathematics/arithmetic
# 2. Use hierarchical tags to enable both broad and narrow searches
# 3. When a tag category reaches 15+ files, consider subdivision
# 4. AST cache files inherit all tags from their source files
